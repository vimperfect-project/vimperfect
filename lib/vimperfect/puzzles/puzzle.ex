defmodule Vimperfect.Puzzles.Puzzle do
  use Ecto.Schema
  import Ecto.Changeset

  @derive {Phoenix.Param, key: :slug}
  schema("puzzles") do
    field :slug, :string
    field :name, :string
    field :complexity, Ecto.Enum, values: [:easy, :medium, :hard]
    field :description, :string
    field :initial_content, :string
    field :initial_language, :string
    field :expected_content, :string
    field :expected_language, :string
    field :hints, {:array, :string}
    field :filename, :string

    belongs_to :author, Vimperfect.Accounts.User

    timestamps(type: :utc_datetime)
  end

  @doc false
  def changeset(puzzle, attrs) do
    # Note: there's no validate for slug since it's going to be generated by the system
    puzzle
    |> cast(attrs, [
      :name,
      :slug,
      :complexity,
      :hints,
      :description,
      :initial_content,
      :initial_language,
      :filename,
      :expected_content,
      :expected_language,
      :author_id
    ])
    # although author_id can be nil, it cannot be empty when updating from the app
    |> validate_required([:name, :description, :author_id])
    |> assoc_constraint(:author)
    |> trim_values()
    |> validate_length(:name, min: 3, max: 50)
    |> validate_length(:description, min: 30, max: 500)
    |> validate_length(:initial_content, min: 1, max: 5000)
    |> validate_length(:expected_content, max: 5000)
    |> validate_intitial_and_expected_different()
    |> validate_change(:slug, fn :slug, slug ->
      if Vimperfect.Puzzles.valid_slug?(slug) do
        []
      else
        [slug: "not a valid slug"]
      end
    end)
    |> validate_change(:filename, fn :filename, filename ->
      if Vimperfect.Util.valid_filename?(filename) do
        []
      else
        [filename: "not a valid filename"]
      end
    end)
    |> unique_constraint(:slug,
      message: "this slug is already used"
    )
  end

  def validate_intitial_and_expected_different(changeset) do
    initial_content = get_field(changeset, :initial_content)
    expected_content = get_field(changeset, :expected_content)

    if initial_content == expected_content do
      add_error(changeset, :expected_content, "initial and expected content cannot be the same")
    else
      changeset
    end
  end

  def trim_values(changeset) do
    [:name, :slug, :description, :filename, :initial_content, :expected_content]
    |> Enum.reduce(changeset, fn field, changeset ->
      update_change(changeset, field, fn value ->
        String.trim(value)
      end)
    end)
  end
end
